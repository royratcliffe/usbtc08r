// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// code.cpp
int16_t open_unit_();
extern "C" SEXP _usbtc08r_open_unit_() {
  BEGIN_CPP11
    return cpp11::as_sexp(open_unit_());
  END_CPP11
}
// code.cpp
int16_t close_unit_(int16_t handle);
extern "C" SEXP _usbtc08r_close_unit_(SEXP handle) {
  BEGIN_CPP11
    return cpp11::as_sexp(close_unit_(cpp11::as_cpp<cpp11::decay_t<int16_t>>(handle)));
  END_CPP11
}
// code.cpp
int16_t get_last_error_(int16_t handle);
extern "C" SEXP _usbtc08r_get_last_error_(SEXP handle) {
  BEGIN_CPP11
    return cpp11::as_sexp(get_last_error_(cpp11::as_cpp<cpp11::decay_t<int16_t>>(handle)));
  END_CPP11
}
// code.cpp
std::string error_(int16_t error);
extern "C" SEXP _usbtc08r_error_(SEXP error) {
  BEGIN_CPP11
    return cpp11::as_sexp(error_(cpp11::as_cpp<cpp11::decay_t<int16_t>>(error)));
  END_CPP11
}

extern "C" {
/* .Call calls */
extern SEXP run_testthat_tests(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_usbtc08r_close_unit_",     (DL_FUNC) &_usbtc08r_close_unit_,     1},
    {"_usbtc08r_error_",          (DL_FUNC) &_usbtc08r_error_,          1},
    {"_usbtc08r_get_last_error_", (DL_FUNC) &_usbtc08r_get_last_error_, 1},
    {"_usbtc08r_open_unit_",      (DL_FUNC) &_usbtc08r_open_unit_,      0},
    {"run_testthat_tests",        (DL_FUNC) &run_testthat_tests,        1},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_usbtc08r(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
